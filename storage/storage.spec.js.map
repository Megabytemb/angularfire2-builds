{"version":3,"file":"storage.spec.js","sourceRoot":"","sources":["../../../src/storage/storage.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FirebaseApp as FBApp } from '@firebase/app-types';\nimport { Observable } from 'rxjs/Observable'\nimport { forkJoin } from 'rxjs/observable/forkJoin';\nimport { TestBed, inject } from '@angular/core/testing';\nimport { FirebaseApp, FirebaseAppConfig, AngularFireModule } from 'angularfire2';\nimport { AngularFireStorageModule, AngularFireStorage } from 'angularfire2/storage';\nimport { COMMON_CONFIG } from './test-config';\n\ndescribe('AngularFireStorage', () => {\n  let app: FBApp;\n  let afStorage: AngularFireStorage;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        AngularFireModule.initializeApp(COMMON_CONFIG),\n        AngularFireStorageModule\n      ]\n    });\n    inject([FirebaseApp, AngularFireStorage], (app_: FirebaseApp, _storage: AngularFireStorage) => {\n      app = app_;\n      afStorage = _storage;\n    })();\n  });\n\n  afterEach(done => {\n    app.delete().then(done, done.fail);\n  });\n\n  it('should exist', () => {\n    expect(afStorage instanceof AngularFireStorage).toBe(true);\n  });\n\n  it('should have the Firebase storage instance', () => {\n    expect(afStorage.storage).toBeDefined();\n  });\n\n  describe('upload task', () => {\n\n    it('should upload and delete a file', (done) => {\n      const data = { angular: \"fire\" };\n      const blob = new Blob([JSON.stringify(data)], { type : 'application/json' });\n      const ref = afStorage.ref('af.json');\n      const task = ref.put(blob);\n      const sub = task.snapshotChanges()\n        .subscribe(\n          snap => { expect(snap).toBeDefined() },\n          e => { done.fail(); },\n          () => {\n            ref.delete().subscribe(done, done.fail);\n          });\n    });\n\n    it('should upload a file and observe the download url', (done) => {\n      const data = { angular: \"fire\" };\n      const blob = new Blob([JSON.stringify(data)], { type : 'application/json' });\n      const ref = afStorage.ref('afs.json');\n      const task = ref.put(blob);\n      const url$ = task.downloadURL();\n      url$.subscribe(\n        url => { expect(url).toBeDefined(); },\n        e => { done.fail(); },\n        () => { ref.delete().subscribe(done, done.fail); }\n      );\n    });\n  });\n\n  describe('reference', () => {\n\n    it('it should upload, download, and delete', (done) => {\n      const data = { angular: \"fire\" };\n      const blob = new Blob([JSON.stringify(data)], { type : 'application/json' });\n      const ref = afStorage.ref('af.json');\n      const task = ref.put(blob);\n      // Wait for the upload\n      const sub = forkJoin(task.snapshotChanges())\n        // get the url download\n        .mergeMap(() => ref.getDownloadURL())\n        // assert the URL\n        .do(url => expect(url).toBeDefined())\n        // Delete the file\n        .mergeMap(url => ref.delete())\n        // finish the test\n        .subscribe(done, done.fail);\n    });\n\n    it('should upload, get metadata, and delete', (done) => {\n      const data = { angular: \"fire\" };\n      const blob = new Blob([JSON.stringify(data)], { type : 'application/json' });\n      const ref = afStorage.ref('af.json');\n      const task = ref.put(blob, { customMetadata: { blah: 'blah' } });\n      // Wait for the upload\n      const sub = forkJoin(task.snapshotChanges())\n        // get the metadata download\n        .mergeMap(() => ref.getMetadata())\n        // assert the URL\n        .do(meta => expect(meta.customMetadata).toEqual({ blah: 'blah' }))\n        // Delete the file\n        .mergeMap(meta => ref.delete())\n        // finish the test\n        .subscribe(done, done.fail);\n    });\n\n  });\n\n});\n"]}