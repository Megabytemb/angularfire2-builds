{"version":3,"file":"auth.spec.js","sourceRoot":"","sources":["../../../src/auth/auth.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FirebaseApp as FBApp } from '@firebase/app-types';\nimport { User } from '@firebase/auth-types';\nimport { ReflectiveInjector, Provider } from '@angular/core';\nimport { Observable } from 'rxjs/Observable'\nimport { Subject } from 'rxjs/Subject'\nimport { Observer } from 'rxjs/Observer';\nimport { TestBed, inject } from '@angular/core/testing';\nimport { _do } from 'rxjs/operator/do';\nimport { take } from 'rxjs/operator/take';\nimport { skip } from 'rxjs/operator/skip';\nimport { FirebaseApp, FirebaseAppConfig, AngularFireModule } from 'angularfire2';\nimport { AngularFireAuth, AngularFireAuthModule } from 'angularfire2/auth';\nimport { COMMON_CONFIG } from './test-config';\n\nfunction authTake(auth: Observable<any>, count: number): Observable<any> {\n  return take.call(auth, 1);\n}\n\nfunction authSkip(auth: Observable<any>, count: number): Observable<any> {\n  return skip.call(auth, 1);\n}\n\nconst firebaseUser = <User> {\n  uid: '12345',\n  providerData: [{ displayName: 'jeffbcrossyface' }]\n};\n\ndescribe('AngularFireAuth', () => {\n  let app: FBApp;\n  let afAuth: AngularFireAuth;\n  let authSpy: jasmine.Spy;\n  let mockAuthState: Subject<User>;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        AngularFireModule.initializeApp(COMMON_CONFIG),\n        AngularFireAuthModule\n      ]\n    });\n    inject([FirebaseApp, AngularFireAuth], (app_: FirebaseApp, _auth: AngularFireAuth) => {\n      app = app_;\n      afAuth = _auth;\n    })();\n\n    mockAuthState = new Subject<User>();\n    spyOn(afAuth, 'authState').and.returnValue(mockAuthState);\n    spyOn(afAuth, 'idToken').and.returnValue(mockAuthState);\n    afAuth.authState = mockAuthState as Observable<User>;\n    afAuth.idToken = mockAuthState as Observable<User>;\n  });\n\n  afterEach(done => {\n    app.delete().then(done, done.fail);\n  });\n\n  describe('Zones', () => {\n    it('should call operators and subscriber in the same zone as when service was initialized', (done) => {\n      // Initialize the app outside of the zone, to mimick real life behavior.\n      let ngZone = Zone.current.fork({\n        name: 'ngZone'\n      });\n      ngZone.run(() => {\n        const subs = [\n          afAuth.authState.subscribe(user => {\n            expect(Zone.current.name).toBe('ngZone');\n            done();\n          }, done.fail),\n          afAuth.authState.subscribe(user => {\n            expect(Zone.current.name).toBe('ngZone');\n            done();\n          }, done.fail)\n        ];\n        mockAuthState.next(firebaseUser);\n        subs.forEach(s => s.unsubscribe());\n      });\n    });\n  });\n\n  it('should be exist', () => {\n    expect(afAuth instanceof AngularFireAuth).toBe(true);\n  });\n\n  it('should have the Firebase Auth instance', () => {\n    expect(afAuth.auth).toBeDefined();\n  });\n\n  it('should emit auth updates through authState', (done: any) => {\n    let count = 0;\n\n    // Check that the first value is null and second is the auth user\n    const subs = afAuth.authState.subscribe(user => {\n      if (count === 0) {\n        expect(user).toBe(null!);\n        count = count + 1;\n        mockAuthState.next(firebaseUser);\n      } else {\n        expect(user).toEqual(firebaseUser);\n        subs.unsubscribe();\n        done();\n      }\n    }, done, done.fail);\n    mockAuthState.next(null!);\n  });\n\n  it('should emit auth updates through idToken', (done: any) => {\n    let count = 0;\n\n    // Check that the first value is null and second is the auth user\n    const subs = afAuth.idToken.subscribe(user => {\n      if (count === 0) {\n        expect(user).toBe(null!);\n        count = count + 1;\n        mockAuthState.next(firebaseUser);\n      } else {\n        expect(user).toEqual(firebaseUser);\n        subs.unsubscribe();\n        done();\n      }\n    }, done, done.fail);\n    mockAuthState.next(null!);\n  });\n\n});\n\n"]}